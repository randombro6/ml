import numpy as np
from sklearn.cluster import KMeans

# Sample data points
X = np.array([[5.9, 3.2],
              [4.6, 2.9],
              [6.2, 2.8],
              [4.7, 3.2],
              [5.5, 4.2],
              [5.0, 3.0],
              [4.9, 3.1],
              [6.7, 3.1],
              [5.1, 3.8],
              [6.0, 3.0]])

# Initial cluster centers
initial_centers = np.array([[6.2, 3.2],   # Red cluster
                            [6.6, 3.7],   # Green cluster
                            [6.5, 3.0]])  # Blue cluster

# Create a KMeans instance with specified parameters
kmeans = KMeans(n_clusters=3, init=initial_centers, random_state=0, n_init=1)

# Fit the KMeans model to the data for the first iteration
kmeans.fit(X)  # First iteration

# Get the center of cluster 1 after the first iteration
cluster1_center_after_1_iteration = kmeans.cluster_centers_[0]
print("Cluster 1 center after 1 iteration:", np.round(cluster1_center_after_1_iteration, 3))

# Fit the KMeans model to the data for the second iteration
kmeans.fit(X)  # Second iteration

# Get the center of cluster 2 after the second iteration
cluster2_center_after_2_iteration = kmeans.cluster_centers_[1]
print("Cluster 2 center after 2 iterations:", np.round(cluster2_center_after_2_iteration, 3))

# Create a KMeans instance for convergence with the default number of iterations (max_iter=300)
kmeans_convergence = KMeans(n_clusters=3, init=initial_centers, random_state=0)

# Fit the KMeans model to the data until convergence
kmeans_convergence.fit(X)

# Get the center of cluster 3 after convergence
cluster3_center_after_convergence = kmeans_convergence.cluster_centers_[2]
print("Cluster 3 center after convergence:", np.round(cluster3_center_after_convergence, 3))

# Print the number of iterations required for convergence
print("Number of iterations for convergence:", kmeans_convergence.n_iter_)